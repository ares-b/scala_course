package spark.basic

import org.apache.spark.sql.{ Column, DataFrame }
import spark.SparkApplication

object ComplexTransformations extends SparkApplication {

  import spark.implicits._

  // Input
  //+---+------+
  //| id| value|
  //+---+------+
  //|  1|    MV|
  //|  2|    MV|
  //|  3|   VPV|
  //|  4|   VPV|
  //+---+------+
  // Result
  //+---+----+
  //| id|name|
  //+---+----+
  //|  1|  MV|
  //|  3| VPV|
  //+---+----+
  val firstOfEachGroupDf = Seq((1, "MV1"), (2, "MV2"), (3, "VPV"), (4, "Others")).toDF("id", "value")

  def firstOfEachGroup(df: DataFrame): DataFrame = ???

  // Input
  //+---+------+
  //| id| value|
  //+---+------+
  //|  1|    MV|
  //|  2|    MV|
  //|  3|   VPV|
  //|  4|   VPV|
  //+---+------+
  // Result
  //+---+----+
  //| id|name|
  //+---+----+
  //|  1|  MV|
  //|  3| VPV|
  //+---+----+
  val limitedCollectSetInput = spark.range(50).withColumn("key", $"id" % 5)

  //Input
  //+---+---+
  //| id|key|
  //+---+---+
  //|  0|  0|
  //|  1|  1|
  //|  2|  2|
  //|  3|  3|
  //|  4|  4|
  //|  5|  0|
  //|  6|  1|
  //|  7|  2|
  //|  8|  3|
  //|  9|  4|
  //| 10|  0|
  //| 11|  1|
  //| 12|  2|
  //| 13|  3|
  //| 14|  4|
  //| 15|  0|
  //| 16|  1|
  //| 17|  2|
  //| 18|  3|
  //| 19|  4|
  //+---+---+
  // Result
  //+---+--------------------------------------+----------------+
  //|key|all                                   |only_first_three|
  //+---+--------------------------------------+----------------+
  //|0  |[0, 15, 30, 45, 5, 20, 35, 10, 25, 40]|[0, 15, 30]     |
  //|1  |[1, 16, 31, 46, 6, 21, 36, 11, 26, 41]|[1, 16, 31]     |
  //|3  |[33, 48, 13, 38, 3, 18, 28, 43, 8, 23]|[33, 48, 13]    |
  //|2  |[12, 27, 37, 2, 17, 32, 42, 7, 22, 47]|[12, 27, 37]    |
  //|4  |[9, 19, 34, 49, 24, 39, 4, 14, 29, 44]|[9, 19, 34]     |
  //+---+--------------------------------------+----------------+
  def limitCollectSet(limit: Int)(df: DataFrame): DataFrame = ???

  // Input
  //+-------------------+---------+
  //|             VALUES|Delimiter|
  //+-------------------+---------+
  //|       50000.0#0#0#|        #|
  //|          0@1000.0@|        @|
  //|                 1$|        $|
  //|1000.00^Test_string|        ^|
  //+-------------------+---------+
  // Result
  //+-------------------+---------+----------------------+
  //|VALUES             |Delimiter|split_values          |
  //+-------------------+---------+----------------------+
  //|50000.0#0#0#       |#        |[50000.0, 0, 0, ]     |
  //|0@1000.0@          |@        |[0, 1000.0, ]         |
  //|1$                 |$        |[1, ]                 |
  //|1000.00^Test_string|^        |[1000.00, Test_string]|
  //+-------------------+---------+----------------------+
  val complexSplitDf = Seq(("50000.0#0#0#", "#"), ("0@1000.0@", "@"), ("1$", "$"), ("1000.00^Test_string", "^"))
    .toDF("VALUES", "Delimiter")

  def complexSplit(sep: Column)(df: DataFrame): DataFrame = ???
}
